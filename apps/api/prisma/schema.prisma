// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  moduleFormat = "esm"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Track {
  id               String            @id @default(cuid())
  title            String
  description      String?
  createdBy        String
  createdByUser    User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  joinedUsers      User[]            @relation("joinedTrack")
  courses          Course[]
  trackInstructors TrackInstructor[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Level {
  id          String   @id @default(cuid())
  title       String
  description String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  trackId     String
  track       Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  levelId     String
  level       Level    @relation(fields: [levelId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
}

model Topic {
  id                String           @id @default(cuid())
  title             String
  durationInMinutes Int
  content           String           @db.Text
  order             Int
  courseId          String
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy         String
  createdByUser     User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userCompletions   UserCompletion[]
  questions         Question[]
}

model UserCompletion {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId])
}

model TrackInstructor {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, trackId])
}

enum QuestionDifficulty {
  easy
  medium
  hard
}

model Question {
  id                 String             @id @default(cuid())
  statement          String
  difficulty         QuestionDifficulty @default(medium)
  options            String[]
  correctOptionIndex Int
  topics             Topic[]
  createdBy          String
  createdByUser      User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model User {
  id              String   @id
  name            String
  email           String
  emailVerified   Boolean
  discordUsername String?
  image           String?
  createdAt       DateTime
  updatedAt       DateTime

  // Auth
  sessions   Session[]
  accounts   Account[]
  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  // Students
  joinedTrack     Track?           @relation(fields: [trackId], references: [id], onDelete: Cascade, name: "joinedTrack")
  trackId         String?
  userCompletions UserCompletion[]

  // Instructors
  createdTracks      Track[]
  createdTopics      Topic[]
  createdQuestions   Question[]
  instructorOfTracks TrackInstructor[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}
